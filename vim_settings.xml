<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="/Python Console" timestamp="1570108365150">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/PycharmProjects/SenzorMeassurement - Noteboke/SMS_Functions.py" timestamp="1573056600375">
        <mark key="i" line="47" column="30" />
        <mark key="[" line="42" column="7" />
        <mark key="]" line="42" column="8" />
        <mark key="^" line="42" column="28" />
        <mark key="." line="42" column="8" />
      </file>
      <file name="$USER_HOME$/PycharmProjects/SenzorMeassurement/SMS_Functions.py" timestamp="1572452185695">
        <mark key="[" line="350" column="6" />
        <mark key="m" line="95" column="27" />
        <mark key="]" line="350" column="6" />
        <mark key="." line="350" column="6" />
        <mark key="^" line="350" column="18" />
      </file>
      <file name="$USER_HOME$/PycharmProjects/SenzorMeassurement - Noteboke/SMS_Process.py" timestamp="1573055169842">
        <mark key="[" line="593" column="0" />
        <mark key="]" line="593" column="0" />
        <mark key="^" line="592" column="14" />
        <mark key="." line="593" column="0" />
      </file>
      <file name="$USER_HOME$/PycharmProjects/laser_analysis/laser_analysis.py" timestamp="1568373492589">
        <mark key="[" line="100" column="14" />
        <mark key="]" line="99" column="13" />
        <mark key="^" line="99" column="13" />
        <mark key="." line="99" column="13" />
      </file>
      <file name="$USER_HOME$/PycharmProjects/SenzorMeassurement/SMS_Process.py" timestamp="1572439413527">
        <mark key="'" line="684" column="44" />
        <mark key="i" line="684" column="44" />
        <mark key="[" line="412" column="40" />
        <mark key="]" line="11" column="0" />
        <mark key="." line="11" column="0" />
        <mark key="^" line="11" column="0" />
      </file>
      <file name="$USER_HOME$/PycharmProjects/SenzorMeassurement/SMS_GUI.py" timestamp="1569847023838">
        <mark key="[" line="247" column="0" />
        <mark key="]" line="247" column="0" />
        <mark key="^" line="247" column="0" />
        <mark key="." line="247" column="0" />
      </file>
      <file name="$USER_HOME$/PycharmProjects/SenzorMeassurement/SMS_Initialize.py" timestamp="1572433141110">
        <mark key="[" line="111" column="0" />
        <mark key="]" line="111" column="0" />
        <mark key="^" line="295" column="10" />
        <mark key="." line="111" column="0" />
      </file>
      <file name="$USER_HOME$/PycharmProjects/TextEditTest/TextEditTest.py" timestamp="1572440368592">
        <mark key="'" line="15" column="14" />
        <mark key="[" line="21" column="0" />
        <mark key="]" line="26" column="14" />
        <mark key="." line="26" column="14" />
        <mark key="^" line="26" column="14" />
      </file>
      <file name="$USER_HOME$/PycharmProjects/SenzorMeassurement - Noteboke/SMS_Initialize.py" timestamp="1566918323377">
        <mark key="[" line="26" column="0" />
        <mark key="]" line="295" column="64" />
        <mark key="^" line="295" column="64" />
        <mark key="." line="295" column="64" />
      </file>
      <file name="$USER_HOME$/PycharmProjects/SenzorMeassurement/join_images_script.py" timestamp="1572433884493">
        <mark key="[" line="205" column="25" />
      </file>
      <file name="D:/Downloads/surface3d_demo2.py" timestamp="1568327217769">
        <mark key="[" line="24" column="11" />
      </file>
      <file name="D:/Downloads/surface3d_demo.py" timestamp="1568367770215">
        <mark key="[" line="41" column="0" />
        <mark key="]" line="41" column="0" />
        <mark key="." line="41" column="0" />
      </file>
      <file name="$USER_HOME$/PycharmProjects/AI_picture_seminare/AI_PictureRecogntion.py" timestamp="1571923914895">
        <mark key="'" line="13" column="10" />
        <mark key="[" line="8" column="16" />
        <mark key="]" line="13" column="0" />
        <mark key="." line="13" column="0" />
        <mark key="^" line="10" column="0" />
      </file>
    </filemarks>
    <jumps>
      <jump line="191" column="20" filename="$USER_HOME$/PycharmProjects/SenzorMeassurement/SMS_Process.py" />
      <jump line="56" column="20" filename="$USER_HOME$/PycharmProjects/SenzorMeassurement/SMS_Process.py" />
      <jump line="688" column="44" filename="$USER_HOME$/PycharmProjects/SenzorMeassurement/SMS_Process.py" />
      <jump line="11" column="0" filename="$USER_HOME$/PycharmProjects/AI_picture_seminare/AI_PictureRecogntion.py" />
      <jump line="15" column="10" filename="$USER_HOME$/PycharmProjects/AI_picture_seminare/AI_PictureRecogntion.py" />
      <jump line="27" column="14" filename="$USER_HOME$/PycharmProjects/TextEditTest/TextEditTest.py" />
    </jumps>
    <registers>
      <register name="1" type="2">
        <text encoding="base64">ICAgIGdsb2JhbCBlcnJvcgo=</text>
      </register>
      <register name="&quot;" type="4">
        <text>p</text>
      </register>
      <register name="2" type="4">
        <text encoding="base64">aWYgbmV3X3RpbWU6CiAgICAgICAgICAgIHNsZWVwX3RpbWVfcyA9IGRhdGV0aW1lLmRhdGV0aW1lLm5vdygpLnNlY29uZCArIGRhdGV0aW1lLmRhdGV0aW1lLm5vdygpLm1pY3Jvc2Vjb25kIC8gMTAwMDAwMAogICAgICAgICAgICBzbGVlcF90aW1lX20gPSBkYXRldGltZS5kYXRldGltZS5ub3coKS5taW51dGUKICAgICAgICBzbGVlcF90aW1lID0gZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCkuc2Vjb25kICsgZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCkubWljcm9zZWNvbmQgLyAxMDAwMDAwCiAgICAgICAgaWYgZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCkubWludXRlICE9IHNsZWVwX3RpbWVfbToKICAgICAgICAgICAgc2xlZXBfdGltZSArPSA2MAogICAgICAgIGlmIHNsZWVwX3RpbWUgLSBzbGVlcF90aW1lX3MgPCBtYXhfc2xlZXBfdGltZToKICAgICAgICAgICAgd2FpdChzbGVlcF91bnRpbCwgbmV3X3RpbWU9RmFsc2UsIHNsZWVwX3RpbWVfcz1zbGVlcF90aW1lX3MsIHNsZWVwX3RpbWVfbT1zbGVlcF90aW1lX20pCiAgICAgICAgZWxzZTo=</text>
      </register>
      <register name="3" type="4">
        <text>root = Tk()


def do():
    time.sleep(1)
    root.iconify()
    pag.click(pag.size())
    time.sleep(100)


button = tkinter.Button(root, text=&quot;Click&quot;, command=do)
button.pack()

root.mainloop()</text>
      </register>
      <register name="4" type="4">
        <text>start_routine(&quot;Sensor_A12-AllType_Z-Origin.RTN&quot;)
                        if False:  # vratit: sensorPos[NumberOfSensor] == 0:
                            ErrorId.startMeasuring[NumberOfSensor] = 2
                            save_log(&quot;\n&quot; + datetime.datetime.now().strftime(&quot;%y-%m-%d %H:%M:%S&quot;) +
                                     &quot;| Setting origin of Z axis has failed (during start of Z origin routine).&quot;)
                        else:
                            wait(False)
                            if sensorPos[NumberOfSensor] == 0:
                                ErrorId.startMeasuring[NumberOfSensor] = 2
                                save_log(&quot;\n&quot; + datetime.datetime.now().strftime(&quot;%y-%m-%d %H:%M:%S&quot;) +
                                         &quot;| Setting origin of Z axis has failed (during process of Z origin routine).&quot;)

                        if sensorPos[NumberOfSensor] != 0:
                            time.sleep(0.5)  # asi nemazat
                            pag.click(Position.resetRoutine)
                            time.sleep(0.5)  # wait(sleep_until=&quot;resetRoutine.png&quot;)
                            if sensorPos[NumberOfSensor] == 0:
                                ErrorId.startMeasuring[NumberOfSensor] = 2
                                save_log(&quot;\n&quot; + datetime.datetime.now().strftime(&quot;%y-%m-%d %H:%M:%S&quot;) +
                                         &quot;| Has been detected that result of previous line of code was unsuccessful&quot;
                                         &quot; - wait function (locate on screen) of 'resetRoutine.png'.&quot;)
                            if ErrorId.startMeasuring[NumberOfSensor] == 0:
                                pag.click(Position.resetZ)
                                time.sleep(0.5)  # wait(sleep_until=&quot;resetZOn.png&quot;)
                                if sensorPos[NumberOfSensor] == 0:
                                    ErrorId.startMeasuring[NumberOfSensor] = 2
                                    save_log(&quot;\n&quot; + datetime.datetime.now().strftime(&quot;%y-%m-%d %H:%M:%S&quot;) +
                                             &quot;| Has been detected that result of previous line of code was unsuccessful&quot;
                                             &quot; - wait function (locate on screen) of 'resetZOn.png'.&quot;)
                                save_log(&quot;\n&quot; + datetime.datetime.now().strftime(&quot;%y-%m-%d %H:%M:%S&quot;) +
                                         &quot;| Origin of Z axis has been successfully set&quot;)</text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">ICAgICAgICBOdW1iZXJPZlNlbnNvciA9IDkK</text>
      </register>
      <register name="6" type="4">
        <text>start_routine(&quot;Sensor_A12-AllType_Z-Origin.RTN&quot;)
#        if sensorPos[NumberOfSensor] == 0:
#            raise WaitError(&quot;Error has been occurred in 'start_routine' function (specifically Z origin routine).&quot;)
        wait(False)
#        if sensorPos[NumberOfSensor] == 0:
#            raise ZAxisError
        time.sleep(0.5)  # Asi nemazat
        pag.click(Position.resetRoutine)
        time.sleep(0.5)  # wait(sleep_until=&quot;resetRoutine.png&quot;)
#        if sensorPos[NumberOfSensor] == 0:
#            raise WaitError(&quot;Not located 'resetRoutine.png'&quot;)
        pag.click(Position.resetZ)
        time.sleep(0.5)  # wait(sleep_until=&quot;resetZOn.png&quot;)
#        if sensorPos[NumberOfSensor] == 0:
#            raise WaitError(&quot;Not located 'resetZOn.png'&quot;)</text>
      </register>
      <register name="7" type="4">
        <text># plt.figure()
# plt.imshow(img, plt.cm.gray)</text>
      </register>
      <register name="8" type="4">
        <text>img)

img_fft = sc.fftpack.fft(img_array)</text>
      </register>
      <register name="9" type="2">
        <text encoding="base64">cGx0LmNvbG9yYmFyKCkK</text>
      </register>
      <register name="-" type="4">
        <text>p</text>
      </register>
      <register name="/" type="4">
        <text encoding="base64">XDxpbWdcPg==</text>
      </register>
    </registers>
    <search>
      <last-search encoding="base64">XDxpbWdcPg==</last-search>
      <last-offset />
      <last-pattern encoding="base64">XDxpbWdcPg==</last-pattern>
      <last-dir>-1</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search>
        <entry encoding="base64">XDx3YWl0XD4=</entry>
        <entry encoding="base64">XDxpbWdcPg==</entry>
      </history-search>
      <history-cmd />
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed S</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed B</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed X</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed 2</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed Q</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed Y</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>